<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.audiro.repository.ReviewDao">

	<!--  여행 후기 1개 상세 내용불러오기 -->
	<select id="readDetailsReviewById" resultType="Post">
		select * from post 
		where post_id = ${postId}
		
	</select>
	
	<!-- 해당 여행후기 좋아요갯수 -->
	<select id="goodCountByPostId" resultType="Post">
		select good
		from post
		where post_id = 10
	</select>
	
	<!-- 내 여행 후기 1개 삭제 -->
	<delete id="deleteReview">
		delete from post where post_id = #{postId}
	</delete>

	<!-- 해당 여행일기 유저 관심유저담기 insert-->
	<insert id ="addLikeUser">
		insert into favorite_users (users_id)
		values (#{user_id})
	</insert>
	
	<!-- 해당 여행일기 찜하기 insert -->
	<insert id ="addLikeReview">
		insert into favorite_post (users_id)
		values (#{user_id})
	</insert>
	
	<!-- 여행후기 글 저장하기 -->
	<insert id="insertReview">
		insert into post (users_id, post_type_id, title, content)
		values (8, 10, #{title}, #{content})
	</insert>
	
	<!-- 여행후기 글 임시저장하기 -->
	<insert id="draftReview">
		insert into draft_post (type_id, users_id, title, content)
		values (10, 8, #{title}, #{contentselectReveiwAll})
	</insert>
	
	
	<!-- postId로 여행후기 내용 불러오기
	<select id="readReviewByPostId" resultType="Post">
		select users_id, title, modified_time, post_id 
		from post
		where post_id = 8
		order by modified_time desc
	</select>-->
	
	
	
	<!-- 여행후기 글 수정하기 -->
	<update id="updateReview">
		update post
		set title = #{title},
		content = #{content},
		modified_time = systimestamp,
		where post_id = #{postId};
	</update>
	
	<!-- 모든여행후기 불러오기 -->
	<select id="selectReviewAll" resultType="Post">
		select *  from post
		where post_type_id = 10 
		order by modified_time desc
	</select>
	
	<!-- 여행후기 제목, 내용, 제목+내용, 닉네임검색 -->
	<select id="search" resultType="Post">
        <bind name="searchKeyword" value="'%' + keyword + '%'" />
        select * from posts
        <where>
            <choose>
                <when test='category.equals("t")'>
                    upper(title) like upper(#{searchKeyword})
                </when>
                <when test='category.equals("c")'>
                    upper(content) like upper(#{searchKeyword})
                </when>
                <when test='category.equals("tc")'>
                    upper(title) like upper(#{searchKeyword})
                    or
                    upper(content) like upper(#{searchKeyword})
                </when>
                <when test='category.equals("n")'>
                    upper(nickname) like upper(#{searchKeyword})
                </when>
            </choose>
        </where>
        order by id desc
        </select>

</mapper>

